# LVB
# 
# (c) Copyright 2003-2012 by Daniel Barker
# (c) Copyright 2013, 2014 by Daniel Barker and Maximilian Strobl
# (c) Copyright 2014 by Daniel Barker, Miguel Pinheiro and Maximilian Strobl
# (c) Copyright 2015 by Daniel Barker, Miguel Pinheiro, Maximilian Strobl
# and Chris Wood
# (c) Copyright 2015 by Daniel Barker, Miguel Pinheiro, Chang Sik Kim,
# Maximilian Strobl and Martyn Winn
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# test for checkpoint_uni() and restore_uni();

$lvb = $ENV{LVB_EXECUTABLE};
### run four times...
$output = `mpirun -np 2 "$lvb" -S -C 2 -s 1234 2>/dev/null; mpirun -np 2 "$lvb" -S -s 1234 2>/dev/null;`;
$status = $?;

##print $output;
##my $to_find = "0	-1	22	9	-1	yes";
##my $offset = 0, $n_count = 0;
##my $result = index($output, $to_find, $offset);
##while ($result != -1) {
##    $offset = $result + 1;
##    $result = index($output, $to_find, $offset);
##    $n_count += 1;
##}

print $output;  
# check output
if (($output !~ "FATAL ERROR") && ($status == 0) && 
		$output =~ "State file has a flag that indicates the MPIid 1 is already end" &&
		$output =~ "1 most parsimonious tree of length 1628 written to file "){
    print "test passed\n";
}
else{
    print "test failed\n";
}

unlink "outtree_1";
unlink "lvb_checkpoint_1";


